{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42e7096b-a927-488e-a210-2f52ee7aeef2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "eba31f24-5a12-4d72-b102-d9f5ab92c09e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID    Name  Age  Marks_Math  Marks_English Gender\n",
      "0   1    riya   17          88             92      F\n",
      "1   2  arjuin   18          75             85      M\n",
      "2   3   Shena   17          90             89      f\n",
      "3   4  Rakesh   19          65             78      M\n",
      "4   5   Aditi   18          95             70      F\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "data={\n",
    "    \"ID\":[1,2,3,4,5],\n",
    "    \"Name\":[\"riya\",\"arjuin\",\"Shena\",\"Rakesh\",\"Aditi\"],\n",
    "    \"Age\":[17,18,17,19,18],\n",
    "    \"Marks_Math\":[88,75,90,65,95],\n",
    "    \"Marks_English\":[92,85,89,78,70],\n",
    "    \"Gender\":[\"F\",\"M\",\"f\",\"M\",\"F\"],\n",
    "}\n",
    "df=pd.DataFrame(data)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "8478b16e-9f5e-4d1b-85f3-b261b0684c71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 6)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "418367dd-d322-413a-afc9-c4c536b4c242",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Name  Marks_English\n",
      "0    riya             92\n",
      "1  arjuin             85\n",
      "2   Shena             89\n",
      "3  Rakesh             78\n",
      "4   Aditi             70\n"
     ]
    }
   ],
   "source": [
    "d=(df[[\"Name\",'Marks_English']])\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "9a4513c1-6342-48bf-9b82-1552fc54c3a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID    Name  Age  Marks_Math  Marks_English Gender  Total_Marks\n",
      "0   1    riya   17          88             92      F          180\n",
      "1   2  arjuin   18          75             85      M          160\n",
      "2   3   Shena   17          90             89      f          179\n",
      "3   4  Rakesh   19          65             78      M          143\n",
      "4   5   Aditi   18          95             70      F          165\n"
     ]
    }
   ],
   "source": [
    "df[\"Total_Marks\"]=df[\"Marks_Math\"]+df[\"Marks_English\"]\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ef713aff-effd-4e4b-a6c6-9b175ea79d15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID    Name  Age  Marks_Math  Marks_English Gender  Total_Marks\n",
      "0   1    riya   17          88             92      F          180\n",
      "1   2  arjuin   18          75             85      M          160\n",
      "2   3   Shena   17          90             89      f          179\n",
      "3   4  Rakesh   19          65             78      M          143\n",
      "4   5   Aditi   18          95             70      F          165\n",
      "5   6   Pavan   16         100            100      M          200\n",
      "6   7    ramu   17          10             10      F           20\n"
     ]
    }
   ],
   "source": [
    "df.loc[len(df.index)]=[6,\"Pavan\",16,100,100,\"M\",200]\n",
    "df.loc[len(df.index)]=[7,\"ramu\",17,10,10,\"F\",20]\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "95ffd0ae-2429-41da-b0a8-f3da3e0db644",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.71428571428571\n"
     ]
    }
   ],
   "source": [
    "A=df[\"Marks_Math\"].mean()\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "324124da-5a27-4807-80e3-2054f33540fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID   Name  Age  Marks_Math  Marks_English Gender  Total_Marks\n",
      "0   1   riya   17          88             92      F          180\n",
      "4   5  Aditi   18          95             70      F          165\n",
      "6   7   ramu   17          10             10      F           20\n"
     ]
    }
   ],
   "source": [
    "d=(df[df[\"Gender\"]==\"F\"])\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "951eb2d2-61ef-4651-a138-7c6a71646a30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6    7\n",
       "5    6\n",
       "4    5\n",
       "3    4\n",
       "2    3\n",
       "1    2\n",
       "0    1\n",
       "Name: ID, dtype: int64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s=df[\"ID\"].sort_values(ascending=False)\n",
    "s"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "174e137e-c6b3-4e02-a819-9dc63fe1e87d",
   "metadata": {},
   "source": [
    "## Replace the Gender values: \"F\" \"FEMALE\",\"M\" \"MALE\" using map()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "9d484f81-17ba-4efc-b337-1922507f1830",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    Female\n",
      "1      Male\n",
      "2       NaN\n",
      "3      Male\n",
      "4    Female\n",
      "5      Male\n",
      "6    Female\n",
      "Name: Gender, dtype: object\n"
     ]
    }
   ],
   "source": [
    "g=df[\"Gender\"].map({\"F\":\"Female\",\"M\":\"Male\"})\n",
    "print(g)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ce54668-b351-46c1-8001-4f0bbbcfdbe5",
   "metadata": {},
   "source": [
    "## Add a new column result with value\"Pass\"if Total_Marks>=150,else\"Fail(Using apply()with lambda)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "5977789e-1e50-4f9d-97be-a409cba848d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    Pass\n",
      "1    Pass\n",
      "2    Pass\n",
      "3    Fail\n",
      "4    Pass\n",
      "5    Pass\n",
      "6    Fail\n",
      "Name: Total_Marks, dtype: object\n"
     ]
    }
   ],
   "source": [
    "ge=df[\"Total_Marks\"].apply(lambda x : \"Pass\" if x >=150 else 'Fail')\n",
    "print(ge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "7c6a4a35-9db7-4119-8928-e5e10244082e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      RIYA\n",
       "1    ARJUIN\n",
       "2     SHENA\n",
       "3    RAKESH\n",
       "4     ADITI\n",
       "5     PAVAN\n",
       "6      RAMU\n",
       "Name: Name, dtype: object"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n=df[\"Name\"].map(str.upper)\n",
    "n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "120972f7-3e49-48da-b77e-53c646ed1ffa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[88, 90, 95, 100]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get(a):\n",
    " if a>80:\n",
    "     return True\n",
    "l1=df[\"Marks_Math\"]\n",
    "res=list(filter(get,l1))\n",
    "res"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25a0d28b-afa4-4292-bf00-cc881a1091c5",
   "metadata": {},
   "source": [
    "## use lambda to create a new column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "fdae16f3-97f9-434f-ba96-5dd6f52dc023",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    A\n",
       "1    C\n",
       "2    A\n",
       "3    C\n",
       "4    C\n",
       "5    A\n",
       "6    C\n",
       "Name: Total_Marks, dtype: object"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fd=df[\"Grade\"]=df[\"Total_Marks\"].apply(lambda x: \"A\" if x >170 else \"C\")\n",
    "fd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "122e0823-b574-4a00-831f-ce35c4643d88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    B\n",
       "1    C\n",
       "2    B\n",
       "3    C\n",
       "4    C\n",
       "5    B\n",
       "6    C\n",
       "Name: Total_Marks, dtype: object"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fd=df[\"Grade\"]=df[\"Total_Marks\"].apply(lambda x: \"B\" if x >170 else \"C\")\n",
    "fd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44155d01-2fa7-42ae-8a2f-fed45036dc21",
   "metadata": {},
   "source": [
    "## use reduce() to calculate the total of all Math Marks....."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "825e6ce9-edcf-4df2-9fdb-e8d6b0276026",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "523"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from functools import reduce\n",
    "tm=reduce(lambda x,y: x+y,df['Marks_Math'])\n",
    "tm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7696e6fb-5657-4d36-933e-9e95b4b08245",
   "metadata": {},
   "source": [
    "# count how many students are below the age of 18.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "7c9eb07f-2805-4d1b-8654-d0b324ff306f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[17, 17, 16, 17]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def gef(a):\n",
    "    if a<18:\n",
    "        return True\n",
    "l1=(df[\"Age\"])\n",
    "res=list(filter(gef,l1))\n",
    "res"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd7c04a5-1832-47f8-8139-14450f5f60cd",
   "metadata": {},
   "source": [
    "## create a new column average which gives average of both subjects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "898bed71-6ad5-4a44-8dc8-14531329569a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74.71428571428571, 74.85714285714286)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nc=df[\"Marks_Math\"].mean(),df[\"Marks_English\"].mean()\n",
    "nc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0931c050-b19b-4276-8258-9528ea08e307",
   "metadata": {},
   "source": [
    "## Display Names of students whose scored more in english than math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "0a19cc46-805b-4c4c-a687-ef2be2ec1a82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     True\n",
      "1     True\n",
      "2    False\n",
      "3     True\n",
      "4    False\n",
      "5    False\n",
      "6    False\n",
      "dtype: bool 0      riya\n",
      "1    arjuin\n",
      "2     Shena\n",
      "3    Rakesh\n",
      "4     Aditi\n",
      "5     Pavan\n",
      "6      ramu\n",
      "Name: Name, dtype: object\n"
     ]
    }
   ],
   "source": [
    "em=df[\"Marks_English\"] > df[\"Marks_Math\"]\n",
    "print(em,df[\"Name\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7afa6564-f82a-42ec-94d3-5358d39b3ebb",
   "metadata": {},
   "source": [
    "## group students by gender and calculate average marks for each gender."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "bdff5ad4-2bf8-43d6-b4a7-535f1bd9c25b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Marks_Math</th>\n",
       "      <th>Marks_English</th>\n",
       "      <th>Total_Marks</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>64.333333</td>\n",
       "      <td>57.333333</td>\n",
       "      <td>121.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M</th>\n",
       "      <td>80.000000</td>\n",
       "      <td>87.666667</td>\n",
       "      <td>167.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>179.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Marks_Math  Marks_English  Total_Marks\n",
       "Gender                                        \n",
       "F        64.333333      57.333333   121.666667\n",
       "M        80.000000      87.666667   167.666667\n",
       "f        90.000000      89.000000   179.000000"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ag=df.groupby(\"Gender\")[[\"Marks_Math\", \"Marks_English\",\"Total_Marks\"]].mean()\n",
    "ag"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a8bf6e9-3f1a-4ab8-bd41-a17d8edd883f",
   "metadata": {},
   "source": [
    "## find the student with the higest total marks using pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "871e3208-b4bd-45c9-893c-7e5b3091d7ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                   6\n",
       "Name             Pavan\n",
       "Age                 16\n",
       "Marks_Math         100\n",
       "Marks_English      100\n",
       "Gender               M\n",
       "Total_Marks        200\n",
       "Grade                B\n",
       "Name: 5, dtype: object"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st=df.loc[df[\"Total_Marks\"].idxmax()]\n",
    "st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1607e5f-3a0f-4df8-8710-c204ecc97d27",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
